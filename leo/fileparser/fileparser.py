''' packages '''
#import traceback
#import sys
import csv
from leo.peaks import peak as peak_module

class FileParser:
    """ Reads in a list of peaks generated by MAVEN and removes excess unecessary data """

    def __init__(self):
        """ Constructor for filereader"""

    # parse a peaks file
    #   fields we are interested in (0 aligned):
    #   4: medMz
    #   5: medRt
    #   8: compound
    #   9: compound ID (usually same as compound)
    #   10: category
    #   12: expectedRtDiff, different betwene found RT and medRt
    #   14: parent
    #   15-24: not used
    #   24+ mzXML peak data (column name might be of interest)
    def parse_peaks_file(self, filename):
        """ Parse a given peaks file assumed to be tabbed delimited """

        try:
            with open(filename, 'rt') as csvfile:
                reader = csv.reader(csvfile, delimiter='\t')

                #to hold the peak data
                peaks = []

                # headers - might be important later
                # they are the name of the mzXML sample file
                row = reader.__next__()
                
                for row in reader:
                    #holds the intensities
                    intensities = []

                    if len(row) > 24:
                        med_mz = float(row[4])
                        med_rt = float(row[5])
                        compound = str(row[8])
                        category = str(row[10])
                        rt_diff = float(row[12])
                        parent = float(row[14])

                        for col in range(24, len(row)):
                            intensities.append(float(row[col]))

                        #print("med_mz: {} med_rt: {} compound: {} category: {} rt_diff: {} parent: {}".format(\
                        #    med_mz, med_rt, compound, category, rt_diff, parent))
                        #print(intensities)

                        peak = peak_module.Peak(med_mz,med_rt,compound,category,rt_diff,parent,intensities)
                        peaks.append(peak)
                
        except IndexError as ex:
            print("Error reading in csv file {}".format(str(ex)))
            return None

        return peaks

    def write_peaks_csv(self, peaks, filename):
        """ Writes a list of peaks to csv file """
        if isinstance(peaks, list):
            if peaks and isinstance(peaks[0], peak_module.Peak):
                try:
                    ## should add a regex to check filename
                    with open(filename, "w+") as csvfile:
                        csvwriter = csv.writer(csvfile, delimiter="\t", quotechar="\"")
                        for peak in peaks:
                            row = [str(peak.med_mz), str(peak.med_rt), str(peak.compound), str(peak.category), str(peak.rt_diff), str(peak.parent)]
                            row = row + [str(intensity) for intensity in peak.intensities]
                            
                            csvwriter.writerow(row)

                except Exception as ex:
                    print("Error writing csv file...{}".format(str(ex)))

            else:
                if not peaks == 0:
                    print("Attempted to write empty peaks list.")
                if not isinstance(peaks[0], peak_module.Peak):
                    print("Received unknown list element type. Exiting.")

                return

        else:
            print("Input must be a list of Peak type.")

        return


        